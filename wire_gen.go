// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"aaa/package_a"
	"aaa/package_b"
	"aaa/package_i"
)

// Injectors from wire.go:

func InitializeApplication() (*application, error) {
	packageB := NewB()
	packageA := NewA(packageB)
	packageB2 := UpdateB(packageB, packageA)
	mainApplication := &application{
		A: packageA,
		B: packageB2,
	}
	return mainApplication, nil
}

// wire.go:

type PackageB2 struct {
	*package_b.PackageB
}

type application struct {
	A *package_a.PackageA
	B *PackageB2
}

func NewA(i package_i.PackageBInterface) *package_a.PackageA {
	a := new(package_a.PackageA)
	a.B = i
	return a
}

func NewB() *package_b.PackageB {
	return new(package_b.PackageB)
}

func UpdateB(b *package_b.PackageB, i package_i.PackageAInterface) *PackageB2 {
	b.A = i
	return &PackageB2{b}
}
